# manually set these queue time variables (allowing users to override):
# SemanticVersion: '$(PackageVersion)-preview.$(Build.BuildId)'
# PublishToNuget: false
# user can then override it:
# "$(PackageVersion)-beta.1" if he wants to publish a specific preview
# "$(PackageVersion)" if he wants to publish the final package version
# all packages are pushed to public feed by default (https://pkgs.dev.azure.com/marcstanlive/Opensource/_packaging/Opensource@Local/nuget/v3/index.json)
# set PublishToNuget to true to also push to nuget.org

resources:
- repo: self
  clean: true
trigger:
  batch: true
  branches:
    include:
    - master

name: $(Major).$(Minor).$(Patch).$(Build.BuildId)
pool:
  vmImage: 'windows-latest'
variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  Major: '2'
  Minor: '0'
  Patch: '2'
  PackageVersion: '$(Major).$(Minor).$(Patch)'
  # www.donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

steps:
- checkout: self
  submodules: true

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    useGlobalJson: true

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'

- task: MSBuild@1
  inputs:
    solution: '**/*.sln'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '-m /p:Version=$(PackageVersion).$(Build.BuildId) /p:InformationalVersion=$(SemanticVersion)'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*Test*.dll
      !**\DotNetCore.Tests.dll
    searchFolder: '$(System.DefaultWorkingDirectory)'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/DotNetCore.Tests.csproj'
    arguments: '-c $(BuildConfiguration) --no-build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack ResourceEmbedder.Core'
  inputs:
    command: custom
    custom: pack
    arguments: 'src/ResourceEmbedder.Core/ResourceEmbedder.Core.csproj -c $(BuildConfiguration) -o $(build.artifactstagingdirectory) -p:PackageVersion=$(SemanticVersion) --no-build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack ResourceEmbedder'
  inputs:
    command: custom
    custom: pack
    arguments: 'src/ResourceEmbedder.MsBuild/ResourceEmbedder.MsBuild.csproj -c $(BuildConfiguration) -o $(build.artifactstagingdirectory) -p:PackageVersion=$(SemanticVersion) --no-build'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact'
  inputs:
    ArtifactName: 'Resource.Embedder'
    targetPath: '$(build.artifactstagingdirectory)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet push'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishVstsFeed: '96cf8193-e838-4a8e-9973-fdd3b259a768/ffddc5d6-b53b-439b-960f-af0d4b856cdf'

- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables.PublishToNuget, 'true'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'
